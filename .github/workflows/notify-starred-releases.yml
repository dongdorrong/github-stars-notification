name: Notify Starred Releases
on:
  schedule: [cron: '0 23,5,8 * * *']  # 매일 한국시간 08시, 14시, 17시에 실행 (UTC 기준)
  workflow_dispatch:

jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      has_new: ${{ steps.detect.outputs.has_new }}
      payloads: ${{ steps.detect.outputs.payloads }}
      message_count: ${{ steps.detect.outputs.message_count }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r .github/scripts/requirements.txt

      - name: Cache release data
        uses: actions/cache@v4
        with:
          path: .cache
          key: ${{ runner.os }}-releases-cache-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-releases-cache-
      
      - name: List starred repos
        id: star
        run: |
          gh api /user/starred --paginate \
            | jq -r '.[].full_name' > repos.txt
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}

      - name: Detect new releases
        id: detect
        run: python .github/scripts/check_release.py
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}

  notify:
    needs: check
    if: needs.check.outputs.has_new == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{ fromJSON(needs.check.outputs.payloads || '[{}]') }}
    steps:
      - name: Send Slack Message
        run: |
          echo "Slack 메시지 전송 중..."
          
          # 메시지 순서에 따른 지연 (Rate limit 방지)
          MESSAGE_INDEX="${{ strategy.job-index }}"
          if [ ! -z "$MESSAGE_INDEX" ] && [ "$MESSAGE_INDEX" -gt 0 ]; then
            DELAY=$((MESSAGE_INDEX * 3))
            echo "${DELAY}초 대기 중... (Rate limit 방지)"
            sleep $DELAY
          fi
          
          echo "Payload 전송 중..."
          # check_release.py에서 이미 Slack 형식으로 준비된 데이터를 그대로 사용
          SLACK_PAYLOAD='${{ toJSON(matrix) }}'
          
          # Slack 웹훅으로 전송
          echo "$SLACK_PAYLOAD" | curl -X POST \
            -H "Content-Type: application/json" \
            -d @- \
            ${{ secrets.SLACK_WEBHOOK_URL }}
          
          echo "메시지 전송 완료"

 